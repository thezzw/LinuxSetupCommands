#Chrome
	wget https://dl.google.com/linux/direct/google-chrome-stable_current_amd64.deb
	sudo dpkg -i google-chrome-stable_current_amd64.deb
	dpkg --get-selections |grep firefox
	sudo apt-get purge firefox
	sudo apt-get purge firefox-locale-en
	
#Zsh
	echo $SHELL
	cat /etc/shells
	sudo apt-get update
	sudo apt-get install zsh
	chsh -s /bin/zsh
	
	sudo apt install curl
	sudo apt install git
	sudo apt install vim
	
	sh -c "$(curl -fsSL https://gitee.com/shmhlsy/oh-my-zsh-install.sh/raw/master/install.sh)"
	git clone https://github.com/zsh-users/zsh-autosuggestions ${ZSH_CUSTOM:-~/.oh-my-zsh}/plugins/zsh-autosuggestions
	git clone https://github.com/zsh-users/zsh-syntax-highlighting.git ${ZSH_CUSTOM:-~/.oh-my-zsh}/plugins/zsh-syntax-highlighting
	sudo apt-get install autojump
	vim ~/.zshrc
		ZSH_THEME="ys"
		plugins=(git zsh-autosuggestions zsh-syntax-highlighting)
		. /usr/share/autojump/autojump.sh
	source ~/.zshrc
	reboot
	
#ROS2 galactic
	locale  # check for UTF-8
	sudo apt update && sudo apt install locales
	sudo locale-gen en_US en_US.UTF-8
	sudo update-locale LC_ALL=en_US.UTF-8 LANG=en_US.UTF-8
	export LANG=en_US.UTF-8
	locale  # verify settings
	
	sudo apt update && sudo apt install curl gnupg2 lsb-release
	sudo curl -sSL https://raw.githubusercontent.com/ros/rosdistro/master/ros.key  -o /usr/share/keyrings/ros-archive-keyring.gpg
	echo "deb [arch=$(dpkg --print-architecture) signed-by=/usr/share/keyrings/ros-archive-keyring.gpg] http://packages.ros.org/ros2/ubuntu $(lsb_release -cs) main" | sudo tee /etc/apt/sources.list.d/ros2.list > /dev/null
	sudo sed -i -e 's/ubuntu .* main/ubuntu focal main/g' /etc/apt/sources.list.d/ros2.list
	
	sudo apt update
	sudo apt install ros-galactic-desktop
	source /opt/ros/galactic/setup.zsh
	echo "source /opt/ros/galactic/setup.zsh" >> ~/.zshrc 
	source ~/.zshrc

#CUDA11.2
	wget https://developer.download.nvidia.com/compute/cuda/11.0.3/local_installers/cuda_11.0.3_450.51.06_linux.run
	chmod +x ./cuda_11.0.3_450.51.06_linux.run
	sudo ./cuda_11.0.3_450.51.06_linux.run
	gedit ~/.zshrc
		export PATH=/usr/local/cuda-11.0/bin:$PATH
		export LD_LIBRARY_PATH=/usr/local/cuda-11.0/lib64
		export LD_LIBRARY_PATH=/usr/local/cuda-11.0/lib64:$LD_LIBRARY_PATH
	source ~/.zshrc

#OpenCV4.5.2 CUDA11.0 CUDNN8.2
	sudo apt update
	sudo apt upgrade
	
	cd ~/Downloads
	wget -O opencv.zip https://github.com/opencv/opencv/archive/refs/tags/4.5.3.zip
	wget -O opencv_contrib.zip https://github.com/opencv/opencv_contrib/archive/refs/tags/4.5.3.zip
	unzip opencv.zip
	unzip opencv_contrib.zip
	cd opencv-4.5.3
	mkdir build
	cd build
	
	sudo apt install -y build-essential cmake git pkg-config libopenexr-dev libblas-dev 
	sudo apt install -y python-dev python-numpy libtbb2 libtbb-dev
	sudo apt install -y libjpeg-dev libpng-dev libtiff-dev libdc1394-22-dev libjasper-dev
	sudo apt install -y libavcodec-dev libavformat-dev libswscale-dev libavutil-dev
	sudo apt-get install libgphoto2-dev libeigen3-dev libhdf5-dev doxygen

	sudo apt install -y \
		libx264-dev \
		mesa-utils \
		libgtk2.0-dev \
		libxvidcore-dev \
		yasm \
		libxine2-dev \
		libgstreamer1.0-dev libgstreamer-plugins-base1.0-dev \
		libv4l-dev \
		libfaac-dev \
		libmp3lame-dev \
		libopencore-amrnb-dev \
		libtheora-dev \
		libvorbis-dev \
		ffmpeg \
		libeigen3-dev libeigen3-doc \
		liblapack-dev \
		tesseract-ocr \
		tesseract-ocr-jpn \
		libgflags-dev \
		libleptonica-dev \
		libtesseract-dev \
		gphoto2 \
		liblapacke-dev \
		libgoogle-glog-dev \
		libprotobuf-dev \
		libprotoc-dev \
		protobuf-compiler \
		ccache \
		libgphoto2-dev \
		libavresample-dev \
		libatlas-base-dev \
		gfortran

	cmake -D CMAKE_BUILD_TYPE=RELEASE \
	-D CMAKE_INSTALL_PREFIX=/usr/local/opencv-4.5.3 \
	-D ENABLE_FAST_MATH=1 \
	-D CUDA_FAST_MATH=1 \
	-D WITH_CUBLAS=1 \
	-D WITH_CUDA=ON \
	-D BUILD_opencv_cudacodec=OFF \
	-D CUDA_ARCH_BIN=7.5 \
	-D WITH_QT=OFF \
	-D OPENCV_GENERATE_PKGCONFIG=ON \
	-D OPENCV_PC_FILE_NAME=opencv.pc \
	-D OPENCV_ENABLE_NONFREE=ON \
	-D OPENCV_EXTRA_MODULES_PATH=~/Downloads/opencv_contrib-4.5.3/modules \
	-D INSTALL_PYTHON_EXAMPLES=OFF \
	-D INSTALL_C_EXAMPLES=OFF \
	-D BUILD_EXAMPLES=OFF ..
	
	make -j8
	sudo make install
	gedit ~/.zshrc
		PKG_CONFIG_PATH=$PKG_CONFIG_PATH:/usr/local/opencv-4.5.3/lib/pkgconfig
		export PKG_CONFIG_PATH
	source ~/.zshrc
	sudo gedit /etc/ld.so.conf.d/opencv.conf
		/usr/local/opencv-4.5.3/lib
	sudo ldconfig
	
#VSCode
	#https://code.visualstudio.com/
	sudo dpkg -i code_1.62.2-1636665017_amd64.deb
	
#VLC
	sudo snap install vlc
	
